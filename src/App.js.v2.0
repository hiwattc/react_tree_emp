import React, { useState } from 'react';

// Sample data generation functions
const generateRandomName = () => {
  const names = ['John', 'Jane', 'David', 'Sarah', 'Michael', 'Emily', 'James', 'Olivia', 'William', 'Emma'];
  return names[Math.floor(Math.random() * names.length)];
};

const generateRandomEmployee = () => ({
  사번: Math.floor(Math.random() * 10000) + 1000,
  이름: generateRandomName(),
  이메일: `${generateRandomName().toLowerCase()}@example.com`,
  휴대폰번호: `010-${Math.floor(Math.random() * 10000)}-${Math.floor(Math.random() * 10000)}`
});

const generateEmployees = () => {
  const employees = [];
  for (let i = 0; i < 3; i++) {
    employees.push(generateRandomEmployee());
  }
  return employees;
};
const generateRandomDepartmentName = () => {
  const departmentNames = [
    '경영지원팀', '영업부', '기술개발팀', '인사팀', '재무팀',
    '마케팅부', '생산관리팀', '구매팀', '품질관리팀', '물류팀',
    '서비스센터', '보안팀', '시스템운영팀', '개발부', '디자인팀',
    '법무팀', '연구소', '글로벌마케팅팀', '고객응대팀', '자재팀',
    '산업기술연구소', '시스템통합팀', '정보보안팀', '인프라운영팀', '데이터분석팀',
    '상품기획팀', '디지털마케팅팀', '금융사업팀', '해외영업팀', '통신망운영팀'
  ];
  return departmentNames[Math.floor(Math.random() * departmentNames.length)];
};

const generateDepartments = (depth, numDepartments) => {
  if (depth === 0) return [];
  const departments = [];
  for (let i = 0; i < numDepartments; i++) {
    const department = {
      name: generateRandomDepartmentName(),
      employees: generateEmployees(),
      subDepartments: generateDepartments(depth - 1, numDepartments),
      checked: false,
      expanded: false // 기본적으로 부서는 접혀진 상태로 설정
    };
    departments.push(department);
  }
  return departments;
};

// Main App component
const App = () => {
  const [selectedEmployees, setSelectedEmployees] = useState([]);
  const [searchQuery, setSearchQuery] = useState('');
  const [rootDepartment, setRootDepartment] = useState({
    name: 'ROOT',
    employees: generateEmployees(),
    subDepartments: generateDepartments(3, 3),
    checked: false,
    expanded: true // 루트 부서는 기본적으로 펼쳐진 상태
  });

  const handleToggle = (department) => {
    department.expanded = !department.expanded;
    setRootDepartment({ ...rootDepartment }); // 상태를 갱신하여 리렌더링
  };

  const handleCheckboxChange = (department) => {
    department.checked = !department.checked;
    updateSubDepartmentsCheckStatus(department);

    const selectedDepartments = getSelectedDepartments(rootDepartment);
    const employees = getEmployeesFromDepartments(selectedDepartments);

    setSelectedEmployees(employees);
  };

  const updateSubDepartmentsCheckStatus = (department) => {
    department.subDepartments.forEach((subDepartment) => {
      subDepartment.checked = department.checked;
      updateSubDepartmentsCheckStatus(subDepartment);
    });
  };

  const getSelectedDepartments = (department) => {
    const selectedDepartments = [];
    if (department.checked) {
      selectedDepartments.push(department);
    }
    department.subDepartments.forEach((subDepartment) => {
      selectedDepartments.push(...getSelectedDepartments(subDepartment));
    });
    return selectedDepartments;
  };

  const getEmployeesFromDepartments = (departments) => {
    return departments.reduce((acc, curr) => {
      acc.push(...curr.employees);
      return acc;
    }, []);
  };
const handleSearch = () => {
  searchDepartments(rootDepartment, searchQuery.toLowerCase());
  
  const selectedDepartments = getSelectedDepartments(rootDepartment);
  const employees = getEmployeesFromDepartments(selectedDepartments);
  
  setSelectedEmployees(employees); // 검색 결과에 따라 선택된 부서의 직원만 조회하여 설정
expandAllDepartments(rootDepartment); // 검색 후 모든 부서를 펼치도록 설정
};
const expandAllDepartments = (department) => {
  department.expanded = true;
  department.subDepartments.forEach((subDepartment) =>
    expandAllDepartments(subDepartment)
  );
};

  const searchDepartments = (department, query) => {
    if (department.name.toLowerCase().includes(query)) {
      department.checked = true;
      department.expanded = true;
    } else {
      department.checked = false;
    }
    department.subDepartments.forEach((subDepartment) =>
      searchDepartments(subDepartment, query)
    );
  };

  return (
    <div>
      <div style={{ marginBottom: '10px' }}>
<input
  type="text"
  value={searchQuery}
  onChange={(e) => setSearchQuery(e.target.value)}
  onKeyPress={(e) => {
    if (e.key === 'Enter') {
      handleSearch();
    }
  }}
  placeholder="부서 검색"
/>
        <button onClick={handleSearch}>검색</button>
      </div>
      <div style={{ float: 'left', width: '50%' }}>
        <h2>조직도</h2>
        <DepartmentTree
          department={rootDepartment}
          handleCheckboxChange={handleCheckboxChange}
          handleToggle={handleToggle}
        />
      </div>
      <div style={{ float: 'right', width: '50%' }}>
        <div>
          <h2>선택된 부서들의 직원 목록</h2>
          <EmployeeList employees={selectedEmployees} />
        </div>
      </div>
    </div>
  );
};

// Component for rendering department tree
const DepartmentTree = ({ department, handleCheckboxChange, handleToggle }) => (
  <ul>
    <li style={{ fontWeight: department.checked ? 'bold' : 'normal' }}>
      <span>
        {department.subDepartments.length > 0 && (
          <span
            style={{ paddingRight: '5px', cursor: 'pointer' }}
            onClick={() => handleToggle(department)}
          >
            {department.expanded ? '-' : '+'}
          </span>
        )}
        <input
          type="checkbox"
          checked={department.checked}
          onChange={() => handleCheckboxChange(department)}
        />
        <span style={{ cursor: 'pointer' }} onClick={() => handleToggle(department)}>
          {department.name} ({department.employees.length})
        </span>
      </span>
      {department.expanded && department.subDepartments.length > 0 && (
        <DepartmentTreeList
          departments={department.subDepartments}
          handleCheckboxChange={handleCheckboxChange}
          handleToggle={handleToggle}
        />
      )}
    </li>
  </ul>
);

// Component for rendering sub-departments
const DepartmentTreeList = ({ departments, handleCheckboxChange, handleToggle }) => (
  <ul>
    {departments.map((department, index) => (
      <li key={index} style={{ display: 'block' }}>
        <span>
          {department.subDepartments.length > 0 && (
            <span
              style={{ paddingRight: '5px', cursor: 'pointer' }}
              onClick={() => handleToggle(department)}
            >
              {department.expanded ? '-' : '+'}
            </span>
          )}
          <input
            type="checkbox"
            checked={department.checked}
            onChange={() => handleCheckboxChange(department)}
          />
          <span style={{ cursor: 'pointer' }} onClick={() => handleToggle(department)}>
            {department.name} ({department.employees.length})
          </span>
        </span>
        {department.expanded && department.subDepartments.length > 0 && (
          <DepartmentTreeList
            departments={department.subDepartments}
            handleCheckboxChange={handleCheckboxChange}
            handleToggle={handleToggle}
          />
        )}
      </li>
    ))}
  </ul>
);



// Component for rendering employee list
const EmployeeList = ({ employees }) => (
  <div>
    <h2>직원 목록</h2>
    <table>
      <thead>
        <tr>
          <th>순번</th>
          <th>사번</th>
          <th>이름</th>
          <th>이메일</th>
          <th>휴대폰번호</th>
        </tr>
      </thead>
      <tbody>
        {employees.map((employee, index) => (
          <tr key={index}>
            <td>{index + 1}</td>
            <td>{employee['사번']}</td>
            <td>{employee['이름']}</td>
            <td>{employee['이메일']}</td>
            <td>{employee['휴대폰번호']}</td>
          </tr>
        ))}
      </tbody>
    </table>
  </div>
);

export default App;

